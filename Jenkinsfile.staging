pipeline {
  agent any

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Start container') {
      steps {
        echo 'Starting container from Docker Hub...'
<<<<<<< HEAD

        // Carrega variáveis do arquivo .env
        script {
          def envVars = readFile('.env').split('\n')
          envVars.each {
            if (it.trim() && !it.startsWith('#')) {
              def (key, value) = it.tokenize('=')
              env[key.trim()] = value.trim()
            }
          }
        }

        // Usa as variáveis carregadas
        sh 'docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS'
        sh 'docker-compose -f docker-compose.staging.yml pull'
        sh 'docker-compose -f docker-compose.staging.yml up -d --no-color'
        sleep time: 60, unit: 'SECONDS'
        sh 'docker-compose -f docker-compose.staging.yml logs'
        sh 'docker-compose -f docker-compose.staging.yml ps'
=======
        sh 'docker login -u $lucasmarqu3s -p $Lu121425@'
        sh 'docker-compose -f docker-compose.staging.yml pull'       // Baixa a imagem do Docker Hub
        sh 'docker-compose -f docker-compose.staging.yml up -d --no-color'
        sleep time: 60, unit: 'SECONDS'                           // Espera o serviço Spring Boot iniciar
        sh 'docker-compose -f docker-compose.staging.yml logs'       // Mostra os logs do container
        sh 'docker-compose -f docker-compose.staging.yml ps'         // Verifica o status do container
>>>>>>> 39dcc5e (fix: add credentials docker)
      }
    }

    stage('Run tests against the container') {
      steps {
        sh 'curl http://localhost:8585 || echo "Service not responding"'
      }
    }
  }

  post {
    always {
      echo 'Pipeline completed'
<<<<<<< HEAD
=======
      // Se quiser parar o container no fim, descomente a linha abaixo:
>>>>>>> 39dcc5e (fix: add credentials docker)
      // sh 'docker-compose -f docker-compose.staging.yml down'
    }
  }
}
